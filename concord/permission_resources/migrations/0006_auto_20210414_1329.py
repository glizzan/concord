# Generated by Django 2.2.13 on 2021-04-14 13:29

from django.db import migrations


def refactor_permissions_and_conditions(apps, schema_editor):

    import json
    from concord.permission_resources.models import PermissionsItem
    from concord.conditionals.models import ConditionManager
    # Note: tried to load PermissionsItem from apps but raised too many errors

    # first, migrate all conditions
    for manager in ConditionManager.objects.all():
        new_conditions = []
        if manager.conditions:
            conditions = json.loads(manager.conditions)
            if isinstance(conditions, dict):  # detects old style
                for key, value in conditions.items():
                    new_conditions.append({
                        "element_id": key, "condition_type": value["data"]["condition_type"],
                        "permission_data": value["data"]["permission_data"],
                        "condition_data": value["data"]["condition_data"]
                    })
                manager.conditions = json.dumps(new_conditions)
                manager.save(override_check=True)

    for item in PermissionsItem.objects.all():

        configuration = json.loads(item.configuration) if item.configuration else {}

        if configuration:

            # if condition manager doesn't exist, create it
            if not item.condition:
                manager = ConditionManager.objects.create(
                    owner=item.get_owner(),
                    community=item.get_owner().pk,
                    set_on="permission")
                item.condition = manager
                item.save(override_check=True)

            if 'self_only' in configuration:
                item.condition.add_condition({"condition_type": "SelfMembershipFilter"})

            if 'role_name' in configuration:
                data = {"condition_type": "RoleMatchesFilter", "user_supplied_value": configuration["role_name"]}
                item.condition.add_condition(data)

            if "fields_to_include" in configuration:
                data = {
                    "condition_type": "ViewedFieldsFilter",
                    "user_supplied_value": json.dumps(configuration["fields_to_include"])
                }
                item.condition.add_condition(data)

            if 'original_creator_only' in configuration:
                if item.get_state_change_object().section == "Comment":
                    item.condition.add_condition({"condition_type": "CreatorOfCommentedFilter"})
                else:
                    item.condition.add_condition({"condition_type": "CreatorFilter"})

            if 'commenter_only' in configuration:
                item.condition.add_condition({"condition_type": "CommenterFilter"})

            if 'target_type' in configuration:
                data = {
                    "condition_type": "TargetTypeFilter",
                    "user_supplied_value": configuration["target_type"]
                }
                item.condition.add_condition(data)

            if 'author_only' in configuration:
                item.condition.add_condition({"condition_type": "CreatorFilter"})

            item.save(override_check=True)


class Migration(migrations.Migration):

    dependencies = [
        ('permission_resources', '0005b_auto_20201009_1605'),
        ('conditionals', '0007_auto_20201009_1809'),
    ]

    operations = [
        migrations.RunPython(refactor_permissions_and_conditions),
    ]
